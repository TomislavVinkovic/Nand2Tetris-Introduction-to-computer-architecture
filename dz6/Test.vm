<Test.xml>
<class>
  <keyword> class </keyword>
  <identifier> Square </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> i </identifier>
    <symbol> , </symbol>
    <identifier> j </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> char </keyword>
    <identifier> c </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <identifier> string </identifier>
    <identifier> s </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> u </identifier>
    <symbol> , </symbol>
    <identifier> v </identifier>
    <symbol> , </symbol>
    <identifier> w </identifier>
    <symbol> , </symbol>
    <identifier> x </identifier>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbol> , </symbol>
    <identifier> z </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> test </identifier>
    <symbol> ( </symbol>
    <keyword> int </keyword>
    <identifier> a </identifier>
    <symbol> , </symbol>
    <keyword> int </keyword>
    <identifier> b </identifier>
    <symbol> , </symbol>
    <keyword> int </keyword>
    <identifier> c </identifier>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <localVarDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> d </identifier>
        <symbol> , </symbol>
        <identifier> e </identifier>
        <symbol> , </symbol>
        <identifier> f </identifier>
        <symbol> ; </symbol>
      </localVarDec>
      <localVarDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>
        <identifier> A </identifier>
        <symbol> , </symbol>
        <identifier> B </identifier>
        <symbol> , </symbol>
        <identifier> C </identifier>
        <symbol> ; </symbol>
      </localVarDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <term>
            <identifier> d </identifier>
          </term>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <term>
            <identifier> e </identifier>
          </term>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> doTest </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> test </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 2 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 3 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 4 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <term>
            <integerConstant> 0 </integerConstant>
          </term>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
</Test.xml>
