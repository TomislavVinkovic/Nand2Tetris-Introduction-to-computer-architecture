function VInt.print 1
push argument 0
pop pointer 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 2
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
call Output.println 0
pop temp 0
push constant 0
return
function VInt.pow2n 2
push constant 1
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push argument 0
lt
not
if-goto WHILE_END0
push local 0
push constant 2
call Math.multiply 2
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function VInt.log2 1
push argument 0
push constant 1
eq
push argument 0
push constant 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
label WHILE_EXP0
push argument 0
push constant 2
gt
push argument 0
push constant 2
eq
or
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
push argument 0
push constant 2
call Math.divide 2
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function VInt.sort 0
push argument 0
pop pointer 0
push this 2
push constant 0
push this 0
push constant 1
sub
call QuickSort.quickSort 3
pop temp 0
push constant 0
return
function VInt.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop this 0
push constant 1
call Array.new 1
pop this 2
push pointer 0
return
label IF_FALSE0
push argument 0
call VInt.pow2n 1
pop this 0
push constant 0
pop this 1
push this 0
call Array.new 1
pop this 2
push pointer 0
return
function VInt.dispose 0
push argument 0
pop pointer 0
push this 2
call Array.dispose 1
pop temp 0
push constant 0
return
function VInt.resize 4
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
push this 2
add
pop pointer 1
push that 0
pop local 0
push this 2
call Array.dispose 1
pop temp 0
push constant 1
pop this 0
push constant 1
call Array.new 1
pop this 2
push constant 0
push this 2
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE0
push argument 1
call VInt.pow2n 1
pop local 0
push this 0
push local 0
call Math.min 2
pop local 2
push local 0
call Array.new 1
pop local 3
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push local 2
lt
not
if-goto WHILE_END0
push local 1
push local 3
add
push local 1
push this 2
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push this 2
call Array.dispose 1
pop temp 0
push local 0
pop this 0
push local 3
pop this 2
push constant 0
return
function VInt.set 2
push argument 0
pop pointer 0
push argument 1
push this 0
push constant 1
sub
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
pop local 1
label WHILE_EXP0
push local 1
push argument 1
lt
push local 1
or
push argument 1
eq
not
if-goto WHILE_END0
push local 1
push constant 2
call Math.multiply 2
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 1
call VInt.log2 1
pop local 0
push pointer 0
push local 0
call VInt.resize 2
pop temp 0
label IF_FALSE0
push argument 1
push this 2
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 1
push argument 1
push constant 1
add
call Math.max 2
pop this 1
push constant 0
return
function VInt.get 0
push argument 0
pop pointer 0
push argument 1
push this 2
add
pop pointer 1
push that 0
return
function VInt.len 0
push argument 0
pop pointer 0
push this 0
return
function VInt.array 0
push argument 0
pop pointer 0
push this 2
return
function VInt.copy 3
push argument 0
pop pointer 0
push this 0
call VInt.log2 1
pop local 1
push local 1
call VInt.new 1
pop local 0
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push this 0
lt
not
if-goto WHILE_END0
push local 0
push local 2
push local 2
push this 2
add
pop pointer 1
push that 0
call VInt.set 3
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function VInt.is_eq 1
push argument 0
call VInt.len 1
push argument 1
call VInt.len 1
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 0
call VInt.len 1
lt
not
if-goto WHILE_END0
push argument 0
push local 0
call VInt.get 2
push argument 1
push local 0
call VInt.get 2
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function VInt.elems 3
push argument 0
call VInt.copy 1
pop local 1
push argument 1
call VInt.copy 1
pop local 2
push local 1
call VInt.sort 1
pop temp 0
push local 2
call VInt.sort 1
pop temp 0
push local 1
push local 2
call VInt.is_eq 2
pop local 0
push local 1
call VInt.dispose 1
pop temp 0
push local 2
call VInt.dispose 1
pop temp 0
push local 0
return
